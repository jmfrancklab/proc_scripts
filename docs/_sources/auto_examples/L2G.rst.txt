
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\L2G.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_L2G.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_L2G.py:


Lorentzian to Gaussian Transformation
=====================================

Demonstrates the Lorentzian to Gaussian transformation.

For this demonstration, we generate inversion
recovery data for a single peak, with a relatively
mild frequency variation, so that no serious
alignment is required before integration. We mimic
the 8-step phase cycle used for echo detection in
these experiments, and include the effect of the
echo time on the data detected in the time domain.

.. GENERATED FROM PYTHON SOURCE LINES 15-63



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_L2G_001.png
         :alt: fake data -- freq domain
         :srcset: /auto_examples/images/sphx_glr_L2G_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_L2G_002.png
         :alt: Lorentzian to Gaussian diagnostic -- frequency domain
         :srcset: /auto_examples/images/sphx_glr_L2G_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_L2G_003.png
         :alt: matched filter diagnostic -- signal Energy
         :srcset: /auto_examples/images/sphx_glr_L2G_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_L2G_004.png
         :alt: matched filter diagnostic -- time domain
         :srcset: /auto_examples/images/sphx_glr_L2G_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_L2G_005.png
         :alt: Lorentzian to Gaussian diagnostic -- time domain
         :srcset: /auto_examples/images/sphx_glr_L2G_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_L2G_006.png
         :alt: fake data -- freq domain after L2G
         :srcset: /auto_examples/images/sphx_glr_L2G_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\jmfranck\pyspecdata.0.log appears to be locked or otherwise inaccessible: I'm going to explore other options for fileno
    ----------  logging output to C:\Users\jmfranck\pyspecdata.2.log  ----------
    c:\users\jmfranck\git_repos\proc_scripts\pyspecProcScripts\first_level\fake_data.py:58: SymPyDeprecationWarning: 

    Passing the function arguments to lambdify() as a set is deprecated. This
    leads to unpredictable results since sets are unordered. Instead, use a list
    or tuple for the function arguments.

    See https://docs.sympy.org/latest/explanation/active-deprecations.html#deprecated-lambdify-arguments-set
    for details.

    This has been deprecated since SymPy version 1.6.3. It
    will be removed in a future version of SymPy.

      thefunction = lambdify(mysymbols, expression, "numpy")
    c:\users\jmfranck\git_repos\pyspecdata\pyspecdata\core.py:1959: UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string "o" (-> marker='o'). The keyword argument will take precedence.
      retval = myplotfunc(*plotargs,**kwargs)






|

.. code-block:: default

    from pylab import *
    from pyspecdata import *
    from pyspecProcScripts import *
    from numpy.random import normal, seed
    from numpy.linalg import norm
    import sympy as s
    from collections import OrderedDict
    seed(2021)
    rcParams['image.aspect'] = 'auto' # needed for sphinx gallery
    # sphinx_gallery_thumbnail_number = 2
    init_logging(level="debug")

    with figlist_var() as fl:
        # {{{ generate the fake data
        # this generates fake clean_data w/ a T1 of 0.2s
        # amplitude of 21, just to pick a random amplitude
        # offset of 300 Hz, FWHM 10 Hz
        t2, td, vd, ph1, ph2 = s.symbols('t2 td vd ph1 ph2')
        echo_time = 5e-3
        data = fake_data(
            21*(1 - 2*s.exp(-vd / 0.2))*s.exp(+1j*2*s.pi*100*(t2) - abs(t2)*50*s.pi),
            OrderedDict([
                ("vd" , nddata(r_[0:1:40j], "vd")),
                ("ph1" , nddata(r_[0, 2] / 4.0, "ph1")),
                ("ph2" , nddata(r_[0:4] / 4.0, "ph2")),
                ("t2" , nddata(r_[0:0.2:256j]-echo_time, "t2"))]),
                {"ph1": 0, "ph2": 1},
                scale=20.)
        # {{{ just have the data phase (not testing phasing here)
        data.setaxis('t2', lambda x: x-echo_time).register_axis({"t2":0})
        data = data['t2',0:-3] # dropping the last couple points avoids aliasing
        #                        effects from the axis registration
        #                        (otherwise, we get "droop" of the baseline)
        # }}}
        data.reorder(["ph1", "ph2", "vd"])
        data = data['t2':(0,None)]
        data['t2',0] *= 0.5
        ph0 = data['t2',0].data.mean()
        ph0 /= abs(ph0)
        data /= ph0
        data.ft("t2")
        fl.next("fake data -- freq domain")
        data = select_pathway(data, ph1=0, ph2=1)
        fl.image(data)
        LG = L2G(data,
                fl=fl)
        fl.next("fake data -- freq domain after L2G")
        fl.image(LG)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.881 seconds)


.. _sphx_glr_download_auto_examples_L2G.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: L2G.py <L2G.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: L2G.ipynb <L2G.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
