
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\generate_integrals.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_generate_integrals.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_generate_integrals.py:

Convert 2D to Integrals with Errors
===================================

Take a 2D dataset and convert it to a table of integrals with errors, utilizing
all the bells and whistles (frequency and time selection, alignment, etc.)

Demonstrate on a fake dataset of an inversion recovery with multiple repeats (φ
× t2 × vd × repeats) w/ normally distributed random noise, and with fluctuating field
(normally distributed field variation).

.. GENERATED FROM PYTHON SOURCE LINES 11-88



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_generate_integrals_001.png
         :alt: Raw Data   for IR, Phased Data  for IR, Aligned Data  for IR, FID  for IR
         :srcset: /auto_examples/images/sphx_glr_generate_integrals_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_generate_integrals_002.png
         :alt: (IR) Real Integrated Data with Bounds
         :srcset: /auto_examples/images/sphx_glr_generate_integrals_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_generate_integrals_003.png
         :alt: (IR) Integrated Data
         :srcset: /auto_examples/images/sphx_glr_generate_integrals_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_generate_integrals_004.png
         :alt: Raw Data   for Enhancement, Phased Data  for Enhancement, Aligned Data  for Enhancement, FID  for Enhancement
         :srcset: /auto_examples/images/sphx_glr_generate_integrals_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_generate_integrals_005.png
         :alt: (Enhancement) Real Integrated Data with Bounds
         :srcset: /auto_examples/images/sphx_glr_generate_integrals_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_generate_integrals_006.png
         :alt: (Enhancement) Integrated Data
         :srcset: /auto_examples/images/sphx_glr_generate_integrals_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\jmfranck\pyspecdata.0.log appears to be locked or otherwise inaccessible: I'm going to explore other options for fileno
    ----------  logging output to C:\Users\jmfranck\pyspecdata.6.log  ----------
    c:\users\jmfranck\git_repos\proc_scripts\pyspecProcScripts\first_level\fake_data.py:58: SymPyDeprecationWarning: 

    Passing the function arguments to lambdify() as a set is deprecated. This
    leads to unpredictable results since sets are unordered. Instead, use a list
    or tuple for the function arguments.

    See https://docs.sympy.org/latest/explanation/active-deprecations.html#deprecated-lambdify-arguments-set
    for details.

    This has been deprecated since SymPy version 1.6.3. It
    will be removed in a future version of SymPy.

      thefunction = lambdify(mysymbols, expression, "numpy")
    --> generate_integrals.py(92):pyspecdata.core   generate_integrals 2023-05-13 16:26:25,541
    INFO: best shift is 0.010001802460114484
    --> generate_integrals.py(199):pyspecdata.core   generate_integrals 2023-05-13 16:27:24,995
    INFO: PH2 IS PRESENT
    c:\users\jmfranck\git_repos\pyspecdata\pyspecdata\core.py:1804: UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string "o" (-> marker='o'). The keyword argument will take precedence.
      return ax.errorbar(*tebargs[:-1],**tebkwargs)
    --> generate_integrals.py(92):pyspecdata.core   generate_integrals 2023-05-13 16:27:25,766
    INFO: best shift is 0.010026744610887836
    c:\users\jmfranck\git_repos\pyspecdata\pyspecdata\figlist.py:492: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
      plt.gcf().tight_layout()






|

.. code-block:: default

    from pylab import *
    from pyspecdata import *
    from pyspecProcScripts import *
    from numpy.random import seed
    import sympy as s
    from collections import OrderedDict

    init_logging(level="debug")

    seed(2021)
    rcParams["image.aspect"] = "auto"  # needed for sphinx gallery
    # sphinx_gallery_thumbnail_number = 3

    fl = fl_mod()
    t2, td, vd, power, ph1, ph2 = s.symbols("t2 td vd power ph1 ph2")
    echo_time = 10e-3
    with figlist_var() as fl:
        for (
            expression,
            variable_defs,
            signal_pathway,
            indirect,
            clock_correction,
            label,
            f_range,
        ) in [
            (
                (
                    23
                    * (1 - 2 * s.exp(-vd / 0.2))
                    * s.exp(+1j * 2 * s.pi * 100 * (t2) - abs(t2) * 50 * s.pi)
                ),
                [
                    ("vd", nddata(r_[0:1:40j], "vd")),
                    ("ph1", nddata(r_[0:4] / 4.0, "ph1")),
                    ("ph2", nddata(r_[0, 2] / 4.0, "ph2")),
                    ("t2", nddata(r_[0:0.2:256j] - echo_time, "t2")),
                ],
                {"ph1": 0, "ph2": 1},
                "vd",
                True,
                "IR",
                (-400, 400),
            ),
            (
                (
                    23
                    * (1 - (32 * power / (0.25 + power)) * 150e-6 * 659.33)
                    * s.exp(+1j * 2 * s.pi * 100 * t2 - abs(t2) * 50 * s.pi)
                ),
                [
                    ("power", nddata(r_[0:4:25j], "power")),
                    ("ph1", nddata(r_[0:4] / 4.0, "ph1")),
                    ("t2", nddata(r_[0:0.2:256j] - echo_time, "t2")),
                ],
                {"ph1": 1},
                "power",
                False,
                "Enhancement",
                (-200, 600),
            ),
        ]:
            fl.basename = "(%s)" % label
            data = fake_data(expression, OrderedDict(variable_defs), signal_pathway)
            data.ft("t2")
            # {{{ make data unitary again
            data /= sqrt(ndshape(data)["t2"]) * data.get_ft_prop("t2", "dt")
            # }}}
            data_int, data = generate_integrals(
                s=data,
                signal_pathway=signal_pathway,
                searchstr=label,
                f_range=f_range,
                indirect=indirect,
                clock_correction=clock_correction,
                fl=fl,
            )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  9.137 seconds)


.. _sphx_glr_download_auto_examples_generate_integrals.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: generate_integrals.py <generate_integrals.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: generate_integrals.ipynb <generate_integrals.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
