
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\Hermitian_Phasing_Actual_Challenging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_Hermitian_Phasing_Actual_Challenging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_Hermitian_Phasing_Actual_Challenging.py:


Phasing and Timing Correction with Real Data
============================================

Take real data with varying echo times, 
and demonstrate how we can automatically find the zeroth order phase and the
center of the echo in order to get data that's purely real in the frequency
domain.

This example provides a challenging test case, with low SNR data (from AOT RMs),
one of which has a very short echo time.

.. GENERATED FROM PYTHON SOURCE LINES 13-65



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_001.png
         :alt: (tau is 1 ms), Raw Data, Phased and centered (ν), Phased and Centered (t)
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_002.png
         :alt: Hermitian Diagnostic (tau is 1 ms), Data with Padding, shifted and phased, Residual 2D, cropped log of Masked Residual
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_003.png
         :alt: (tau is 1 ms) cost function triangular mask - freq filter, (tau is 1 ms) cost function triangular mask - freq filter
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_004.png
         :alt: (tau is 3.5 ms), Raw Data, Phased and centered (ν), Phased and Centered (t)
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_005.png
         :alt: Hermitian Diagnostic (tau is 3.5 ms), Data with Padding, shifted and phased, Residual 2D, cropped log of Masked Residual
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_006.png
         :alt: (tau is 3.5 ms) cost function triangular mask - freq filter, (tau is 3.5 ms) cost function triangular mask - freq filter
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_007.png
         :alt: (tau is 11.135 ms), Raw Data, Phased and centered (ν), Phased and Centered (t)
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_008.png
         :alt: Hermitian Diagnostic (tau is 11.135 ms), Data with Padding, shifted and phased, Residual 2D, cropped log of Masked Residual
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_009.png
         :alt: (tau is 11.135 ms) cost function triangular mask - freq filter, (tau is 11.135 ms) cost function triangular mask - freq filter
         :srcset: /auto_examples/images/sphx_glr_Hermitian_Phasing_Actual_Challenging_009.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\jmfranck\pyspecdata.0.log appears to be locked or otherwise inaccessible: I'm going to explore other options for fileno
    ----------  logging output to C:\Users\jmfranck\pyspecdata.5.log  ----------
    c:\users\jmfranck\git_repos\pyspecdata\pyspecdata\core.py:1959: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string ":" (-> linestyle=':'). The keyword argument will take precedence.
      retval = myplotfunc(*plotargs,**kwargs)
    c:\users\jmfranck\git_repos\pyspecdata\pyspecdata\core.py:3842: RuntimeWarning: divide by zero encountered in log10
      retval = func(self.data)
    --> Hermitian_Phasing_Actual_Challenging.py(55):root             <module> 2023-05-13 16:26:18,645
    INFO: best shift is: 0.0038633882572862996
    --> Hermitian_Phasing_Actual_Challenging.py(55):root             <module> 2023-05-13 16:26:19,958
    INFO: best shift is: 0.003360618552570959
    --> Hermitian_Phasing_Actual_Challenging.py(55):root             <module> 2023-05-13 16:26:21,653
    INFO: best shift is: 0.011021241158628382






|

.. code-block:: default

    from pyspecdata import *
    from pyspecProcScripts import *
    from pylab import *
    import sympy as s
    from collections import OrderedDict
    from numpy.random import normal
    from scipy.signal import tukey
    init_logging(level='debug')

    rcParams["image.aspect"] = "auto"  # needed for sphinx gallery

    # sphinx_gallery_thumbnail_number = 1
    t2, td, vd, power, ph1, ph2 = s.symbols("t2 td vd power ph1 ph2")
    f_range = (-0.75e3, 0.75e3) # to deal with the shorter echoes, we really just need to use shorter dwell times
    filename = '210604_50mM_4AT_AOT_w11_cap_probe_echo'
    signal_pathway = {'ph1':1,'ph2':0}
    with figlist_var() as fl:
        for nodename,file_location,postproc,label,alias_slop in [
            ('tau_1000','ODNP_NMR_comp/Echoes','spincore_echo_v1',
                'tau is 1 ms',1),
            ('tau_3500','ODNP_NMR_comp/Echoes','spincore_echo_v1',
                'tau is 3.5 ms',3),
            ('tau_11135','ODNP_NMR_comp/Echoes','spincore_echo_v1',
                'tau is 11.135 ms',3),
                ]:
            data = find_file(filename,exp_type=file_location,expno=nodename,
                    postproc=postproc,lookup=lookup_table)
            fl.basename = "(%s)" % label
            fig, ax_list = subplots(1, 3, figsize = (7,7))
            fig.suptitle(fl.basename)
            data.reorder(['ph1','ph2','nScans','t2'])
            fl.next("Data processing", fig=fig)
            fl.image(data['t2':(-1e3,1e3)], ax=ax_list[0])
            ax_list[0].set_title("Raw Data")
            data = data['t2':f_range]
            data.ift("t2")
            fl.basename = "(%s)"%label
            best_shift = hermitian_function_test(
                select_pathway(data.C.mean("nScans"), signal_pathway),
                aliasing_slop=alias_slop,
                fl=fl
            )
            logging.info(strm("best shift is:",best_shift))
            data.setaxis("t2", lambda x: x - best_shift).register_axis({"t2": 0})
            data /= zeroth_order_ph(select_pathway(data,signal_pathway))
            data.ft('t2')
            fl.image(data['t2':(-1e3,1e3)], ax=ax_list[1])
            ax_list[1].set_title("Phased and centered (ν)")
            data.ift("t2")
            fl.image(data, ax=ax_list[2], human_units=False)
            ax_list[2].set_title("Phased and Centered (t)")
            fig.tight_layout(rect=[0, 0.03, 1, 0.95])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.842 seconds)


.. _sphx_glr_download_auto_examples_Hermitian_Phasing_Actual_Challenging.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Hermitian_Phasing_Actual_Challenging.py <Hermitian_Phasing_Actual_Challenging.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Hermitian_Phasing_Actual_Challenging.ipynb <Hermitian_Phasing_Actual_Challenging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
