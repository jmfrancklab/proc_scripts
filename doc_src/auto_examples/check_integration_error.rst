
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\check_integration_error.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_check_integration_error.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_check_integration_error.py:

Check integral error calculation
================================

Generate a fake dataset of an inversion recovery with multiple repeats (φ
× t2 × vd × repeats) w/ normally distributed random noise.
Check that the following match:

- integral w/ error (the canned routine :func:`~pyspecProcScripts.integral_w_errors`)
- propagate error based off the programmed σ of the normal distribution
- set the error bars based on the standard deviation (along the repeats
  dimension) of the *real* part of the integral
- propagate error based off the variance of the noise in the inactive
  coherence channels (do this manually inside this script -- should mimic
  what :func:`~pyspecProcScripts.integral_w_errors` does)

.. GENERATED FROM PYTHON SOURCE LINES 16-106



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_check_integration_error_001.png
          :alt: signal Energy
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_check_integration_error_002.png
          :alt: different types of error
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Users\Alex Guinness\pyspecdata.0.log appears to be locked or otherwise inaccessible: I'm going to explore other options for fileno
    logging output to C:\Users\Alex Guinness\pyspecdata.1.log
    shape of all results [(40, 'vd'), (100, 'repeats')]
    FWHM IS 171.17117945945947
    #0
    FWHM IS 171.17117945945947
    #1
    FWHM IS 171.17117945945947
    #2
    FWHM IS 171.17117945945947
    #3
    FWHM IS 171.17117945945947
    #4
    FWHM IS 170.17017846846846
    #5
    FWHM IS 171.17117945945947
    #6
    FWHM IS 171.17117945945947
    #7
    FWHM IS 171.17117945945947
    #8
    FWHM IS 171.17117945945947
    #9
    FWHM IS 171.17117945945947
    #10
    FWHM IS 171.17117945945947
    #11
    FWHM IS 171.17117945945947
    #12
    FWHM IS 170.17017846846846
    #13
    FWHM IS 171.17117945945947
    #14
    FWHM IS 171.17117945945947
    #15
    FWHM IS 171.17117945945947
    #16
    FWHM IS 171.17117945945947
    #17
    FWHM IS 171.17117945945947
    #18
    FWHM IS 171.17117945945947
    #19
    FWHM IS 171.17117945945947
    #20
    FWHM IS 170.17017846846846
    #21
    FWHM IS 170.17017846846846
    #22
    FWHM IS 171.17117945945947
    #23
    FWHM IS 170.17017846846846
    #24
    FWHM IS 171.17117945945947
    #25
    FWHM IS 171.17117945945947
    #26
    FWHM IS 171.17117945945947
    #27
    FWHM IS 171.17117945945947
    #28
    FWHM IS 171.17117945945947
    #29
    FWHM IS 171.17117945945947
    #30
    FWHM IS 171.17117945945947
    #31
    FWHM IS 171.17117945945947
    #32
    FWHM IS 171.17117945945947
    #33
    FWHM IS 171.17117945945947
    #34
    FWHM IS 171.17117945945947
    #35
    FWHM IS 171.17117945945947
    #36
    FWHM IS 171.17117945945947
    #37
    FWHM IS 171.17117945945947
    #38
    FWHM IS 170.17017846846846
    #39
    FWHM IS 171.17117945945947
    #40
    FWHM IS 171.17117945945947
    #41
    FWHM IS 171.17117945945947
    #42
    FWHM IS 171.17117945945947
    #43
    FWHM IS 171.17117945945947
    #44
    FWHM IS 171.17117945945947
    #45
    FWHM IS 170.17017846846846
    #46
    FWHM IS 171.17117945945947
    #47
    FWHM IS 171.17117945945947
    #48
    FWHM IS 171.17117945945947
    #49
    FWHM IS 171.17117945945947
    #50
    FWHM IS 170.17017846846846
    #51
    FWHM IS 171.17117945945947
    #52
    FWHM IS 171.17117945945947
    #53
    FWHM IS 171.17117945945947
    #54
    FWHM IS 171.17117945945947
    #55
    FWHM IS 171.17117945945947
    #56
    FWHM IS 171.17117945945947
    #57
    FWHM IS 171.17117945945947
    #58
    FWHM IS 171.17117945945947
    #59
    FWHM IS 170.17017846846846
    #60
    FWHM IS 171.17117945945947
    #61
    FWHM IS 171.17117945945947
    #62
    FWHM IS 171.17117945945947
    #63
    FWHM IS 171.17117945945947
    #64
    FWHM IS 171.17117945945947
    #65
    FWHM IS 171.17117945945947
    #66
    FWHM IS 170.17017846846846
    #67
    FWHM IS 171.17117945945947
    #68
    FWHM IS 171.17117945945947
    #69
    FWHM IS 170.17017846846846
    #70
    FWHM IS 171.17117945945947
    #71
    FWHM IS 171.17117945945947
    #72
    FWHM IS 171.17117945945947
    #73
    FWHM IS 171.17117945945947
    #74
    FWHM IS 170.17017846846846
    #75
    FWHM IS 171.17117945945947
    #76
    FWHM IS 171.17117945945947
    #77
    FWHM IS 171.17117945945947
    #78
    FWHM IS 171.17117945945947
    #79
    FWHM IS 170.17017846846846
    #80
    FWHM IS 171.17117945945947
    #81
    FWHM IS 171.17117945945947
    #82
    FWHM IS 171.17117945945947
    #83
    FWHM IS 171.17117945945947
    #84
    FWHM IS 171.17117945945947
    #85
    FWHM IS 171.17117945945947
    #86
    FWHM IS 171.17117945945947
    #87
    FWHM IS 171.17117945945947
    #88
    FWHM IS 171.17117945945947
    #89
    FWHM IS 171.17117945945947
    #90
    FWHM IS 171.17117945945947
    #91
    FWHM IS 171.17117945945947
    #92
    FWHM IS 171.17117945945947
    #93
    FWHM IS 171.17117945945947
    #94
    FWHM IS 171.17117945945947
    #95
    FWHM IS 171.17117945945947
    #96
    FWHM IS 171.17117945945947
    #97
    FWHM IS 171.17117945945947
    #98
    FWHM IS 171.17117945945947
    #99
    off-pathway std array([1.9523787 , 1.9038944 , 2.00558523, 1.88379976, 1.96008724,
           1.96492708, 1.99554091, 1.97055589, 2.05028731, 1.92895103,
           1.98797383, 2.02481813, 2.07667946, 2.02101033, 2.02258865,
           2.04249788, 1.90644842, 2.06727753, 1.95153511, 1.98834567,
           1.95638835, 1.9653656 , 1.99013289, 1.96127488, 2.00321073,
           2.08155062, 1.94001856, 2.05125871, 1.99382857, 2.02115822,
           2.07630969, 1.89644381, 1.98962807, 1.9494399 , 2.00127542,
           1.98194629, 1.86394314, 2.01428893, 1.92223744, 2.12781168])
                    +/-None
            dimlabels=['vd']
            axes={`vd':array([0.        , 0.02564103, 0.05128205, 0.07692308, 0.1025641 ,
           0.12820513, 0.15384615, 0.17948718, 0.20512821, 0.23076923,
           0.25641026, 0.28205128, 0.30769231, 0.33333333, 0.35897436,
           0.38461538, 0.41025641, 0.43589744, 0.46153846, 0.48717949,
           0.51282051, 0.53846154, 0.56410256, 0.58974359, 0.61538462,
           0.64102564, 0.66666667, 0.69230769, 0.71794872, 0.74358974,
           0.76923077, 0.79487179, 0.82051282, 0.84615385, 0.87179487,
           0.8974359 , 0.92307692, 0.94871795, 0.97435897, 1.        ])
                            +/-None}
     programmed std 2.0






|

.. code-block:: default

    from pylab import *
    from pyspecdata import *
    from pyspecProcScripts import integrate_limits, integral_w_errors

    # sphinx_gallery_thumbnail_number = 2

    init_logging(level="debug")
    fl = figlist_var()
    t2 = nddata(r_[0:1:1024j], "t2")
    vd = nddata(r_[0:1:40j], "vd")
    ph1 = nddata(r_[0, 2] / 4.0, "ph1")
    ph2 = nddata(r_[0:4] / 4.0, "ph2")
    signal_pathway = {"ph1": 0, "ph2": 1}
    excluded_pathways = [(0, 0), (0, 3)]
    # this generates fake clean_data w/ a T₂ of 0.2s
    # amplitude of 21, just to pick a random amplitude
    # offset of 300 Hz, FWHM 10 Hz
    clean_data = 21*(1 - 2*exp(-vd / 0.2))*exp(+1j*2*pi*100*t2 - t2*10*pi)
    clean_data *= exp(signal_pathway["ph1"]*1j*2*pi*ph1)
    clean_data *= exp(signal_pathway["ph2"]*1j*2*pi*ph2)
    clean_data["t2":0] *= 0.5
    fake_data_noise_std = 2.0
    clean_data.reorder(["ph1", "ph2", "vd"])
    bounds = (0, 200)  # seem reasonable to me
    result = 0
    n_repeats = 100 
    all_results = ndshape(clean_data) + (n_repeats, "repeats")
    all_results.pop("t2").pop("ph1").pop("ph2")
    all_results = all_results.alloc()
    all_results.setaxis("vd", clean_data.getaxis("vd"))
    print("shape of all results", ndshape(all_results))
    for j in range(n_repeats):
        data = clean_data.C
        data.add_noise(fake_data_noise_std)
        # at this point, the fake data has been generated
        data.ft(["ph1", "ph2"])
        # {{{ usually, we don't use a unitary FT -- this makes it unitary
        data /= 0.5 * 0.25  # the dt in the integral for both dims
        data /= sqrt(ndshape(data)["ph1"] * ndshape(data)["ph2"])  # normalization
        # }}}
        dt = diff(data.getaxis("t2")[r_[0, 1]]).item()
        data.ft("t2", shift=True)
        # {{{
        data /= sqrt(ndshape(data)["t2"]) * dt
        error_pathway = (set(((j,k) for j in range(ndshape(data)['ph1']) for k in range(ndshape(data)['ph2'])))
                - set(excluded_pathways)
                - set([(signal_pathway['ph1'],signal_pathway['ph2'])]))
        error_pathway = [{'ph1':j,'ph2':k} for j,k in error_pathway]
        s_int,frq_slice,mystd = integral_w_errors(data,signal_pathway,error_pathway,
                indirect='vd', fl=fl,return_frq_slice=True)
        # }}}
        manual_bounds = data["ph1", 0]["ph2", 1]["t2":frq_slice]
        N = ndshape(manual_bounds)["t2"]
        df = diff(data.getaxis("t2")[r_[0, 1]]).item()
        manual_bounds.integrate("t2")
        # N terms that have variance given by fake_data_noise_std**2 each multiplied by df
        all_results["repeats", j] = manual_bounds
        print("#%d"%j)
    std_off_pathway = (
        data["ph1", 0]["ph2", 0]["t2":bounds]
        .C.run(lambda x: abs(x)**2/2) # sqrt2 so variance is variance of real
        .mean_all_but(["t2", "vd"])
        .mean("t2")
        .run(sqrt)
    )
    print(
        "off-pathway std", std_off_pathway, "programmed std", fake_data_noise_std
    )
    propagated_variance_from_inactive = N * df ** 2 * std_off_pathway ** 2
    # removed factor of 2 in following, which shouldn't have been there
    propagated_variance = N * df**2 * fake_data_noise_std**2
    fl.next("different types of error")
    fl.plot(s_int,".",capsize=6,label = 'std from int w err',alpha=0.5)
    manual_bounds.set_error(sqrt(propagated_variance))
    fl.plot(
        manual_bounds,
        ".",
        capsize=6,
        label=r"propagated from programmed variance",
        alpha=0.5,
    )
    all_results.run(real).mean("repeats", std=True)
    # by itself, that would give error bars, but the data would be averaged -- better to put the data in the same position
    manual_bounds.set_error(all_results.get_error())
    # the fact that this matches the previous shows that my sample size is
    # large enough to give good statistics
    fl.plot(manual_bounds, ".", capsize=6, label=r"std from repeats", alpha=0.5)
    manual_bounds.set_error(sqrt(propagated_variance_from_inactive.data))
    fl.plot(manual_bounds, ".", capsize=6, label=r"propagated from inactive std", alpha=0.5)
    fl.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.097 seconds)


.. _sphx_glr_download_auto_examples_check_integration_error.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: check_integration_error.py <check_integration_error.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: check_integration_error.ipynb <check_integration_error.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
